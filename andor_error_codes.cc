// -*- mode: C++/lah -*-
// Time-stamp: "2012-10-02 22:39:17 sb"

/*
  file       andor_error_codes.cc
  copyright  (c) Sebastian Blatt 2010, 2011, 2012

*/

static const char* andor_error_strings[] = {
 "DRV_ERROR_CODES",
 "DRV_SUCCESS",
 "DRV_VXDNOTINSTALLED",
 "DRV_ERROR_SCAN",
 "DRV_ERROR_CHECK_SUM",
 "DRV_ERROR_FILELOAD",
 "DRV_UNKNOWN_FUNCTION",
 "DRV_ERROR_VXD_INIT",
 "DRV_ERROR_ADDRESS",
 "DRV_ERROR_PAGELOCK",
 "DRV_ERROR_PAGEUNLOCK",
 "DRV_ERROR_BOARDTEST",
 "DRV_ERROR_ACK",
 "DRV_ERROR_UP_FIFO",
 "DRV_ERROR_PATTERN",
 "DRV_ACQUISITION_ERRORS",
 "DRV_ACQ_BUFFER",
 "DRV_ACQ_DOWNFIFO_FULL",
 "DRV_PROC_UNKONWN_INSTRUCTION",
 "DRV_ILLEGAL_OP_CODE",
 "DRV_KINETIC_TIME_NOT_MET",
 "DRV_ACCUM_TIME_NOT_MET",
 "DRV_NO_NEW_DATA",
 "DRV_PCI_DMA_FAIL",
 "DRV_SPOOLERROR",
 "DRV_SPOOLSETUPERROR",
 "DRV_FILESIZELIMITERROR",
 "DRV_ERROR_FILESAVE",
 "DRV_TEMPERATURE_CODES",
 "DRV_TEMPERATURE_OFF",
 "DRV_TEMPERATURE_NOT_STABILIZED",
 "DRV_TEMPERATURE_STABILIZED",
 "DRV_TEMPERATURE_NOT_REACHED",
 "DRV_TEMPERATURE_OUT_RANGE",
 "DRV_TEMPERATURE_NOT_SUPPORTED",
 "DRV_TEMPERATURE_DRIFT",
 "DRV_GENERAL_ERRORS",
 "DRV_INVALID_AUX",
 "DRV_COF_NOTLOADED",
 "DRV_FPGAPROG",
 "DRV_FLEXERROR",
 "DRV_GPIBERROR",
 "DRV_EEPROMVERSIONERROR",
 "DRV_DATATYPE",
 "DRV_DRIVER_ERRORS",
 "DRV_P1INVALID",
 "DRV_P2INVALID",
 "DRV_P3INVALID",
 "DRV_P4INVALID",
 "DRV_INIERROR",
 "DRV_COFERROR",
 "DRV_ACQUIRING",
 "DRV_IDLE",
 "DRV_TEMPCYCLE",
 "DRV_NOT_INITIALIZED",
 "DRV_P5INVALID",
 "DRV_P6INVALID",
 "DRV_INVALID_MODE",
 "DRV_INVALID_FILTER",
 "DRV_I2CERRORS",
 "DRV_I2CDEVNOTFOUND",
 "DRV_I2CTIMEOUT",
 "DRV_P7INVALID",
 "DRV_P8INVALID",
 "DRV_P9INVALID",
 "DRV_P10INVALID",
 "DRV_USBERROR",
 "DRV_IOCERROR",
 "DRV_VRMVERSIONERROR",
 "DRV_USB_INTERRUPT_ENDPOINT_ERROR",
 "DRV_RANDOM_TRACK_ERROR",
 "DRV_INVALID_TRIGGER_MODE",
 "DRV_LOAD_FIRMWARE_ERROR",
 "DRV_DIVIDE_BY_ZERO_ERROR",
 "DRV_INVALID_RINGEXPOSURES",
 "DRV_BINNING_ERROR",
 "DRV_INVALID_AMPLIFIER",
 "DRV_ERROR_NOCAMERA",
 "DRV_NOT_SUPPORTED",
 "DRV_NOT_AVAILABLE",
 "DRV_ERROR_MAP",
 "DRV_ERROR_UNMAP",
 "DRV_ERROR_MDL",
 "DRV_ERROR_UNMDL",
 "DRV_ERROR_BUFFSIZE",
 "DRV_ERROR_NOHANDLE",
 "DRV_GATING_NOT_AVAILABLE",
 "DRV_FPGA_VOLTAGE_ERROR",
 "DRV_OW_CMD_FAIL",
 "DRV_OWMEMORY_BAD_ADDR",
 "DRV_OWCMD_NOT_AVAILABLE",
 "DRV_OW_NO_SLAVES",
 "DRV_OW_NOT_INITIALIZED",
 "DRV_OW_ERROR_SLAVE_NUM",
 "DRV_MSTIMINGS_ERROR"
  };

static const unsigned int andor_error_codes[] = {
 20001,
 20002,
 20003,
 20004,
 20005,
 20006,
 20007,
 20008,
 20009,
 20010,
 20011,
 20012,
 20013,
 20014,
 20015,
 20017,
 20018,
 20019,
 20020,
 20021,
 20022,
 20023,
 20024,
 20025,
 20026,
 20027,
 20028,
 20029,
 20033,
 20034,
 20035,
 20036,
 20037,
 20038,
 20039,
 20040,
 20049,
 20050,
 20051,
 20052,
 20053,
 20054,
 20055,
 20064,
 20065,
 20066,
 20067,
 20068,
 20069,
 20070,
 20071,
 20072,
 20073,
 20074,
 20075,
 20076,
 20077,
 20078,
 20079,
 20080,
 20081,
 20082,
 20083,
 20084,
 20085,
 20086,
 20089,
 20090,
 20091,
 20093,
 20094,
 20095,
 20096,
 20097,
 20098,
 20099,
 20100,
 20990,
 20991,
 20992,
 20115,
 20116,
 20117,
 20118,
 20119,
 20121,
 20130,
 20131,
 20150,
 20151,
 20152,
 20153,
 20154,
 20155,
 20156
  };

const char* andor_strerr(unsigned int code){
  static const size_t n = sizeof(andor_error_codes)/sizeof(unsigned int);
  for(size_t i=0; i<n; ++i){
    if(andor_error_codes[i] == code){
      return andor_error_strings[i];
    }
  }
  return "Error code not found";
}

// andor_error_codes.cc ends here
